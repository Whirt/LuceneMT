package LuceneIndexing;

import java.io.IOException;
import java.nio.file.Paths;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.similarities.BM25Similarity;
import org.apache.lucene.search.similarities.ClassicSimilarity;
import org.apache.lucene.store.FSDirectory;

/* Classe addetta alla ricerca/query dei file indicizzati
 * si definisce Index"Explorer" solo per differenziarsi da IndexSearcher
 */

public class IndexExplorer {
	
	public static final int SHOWPAGES = 5;
	public static final int HITSPERPAGE = 10;
	
	private TopDocs results;
	private ScoreDoc[] hits;
	private int totalHits;
	
	private IndexSearcher searcher;
	
	/* Risponde alla query cercando nell'indice alla directory indicata
	 * e col modelo specificato  */
	private IndexExplorer() {}
	public IndexExplorer(String queryString, String searchIndexPath, ModelsID model, 
			TolerantID tolerandMode,DocFields field) throws Exception {
		if (queryString == null || searchIndexPath == null ||
			queryString.equals(searchIndexPath)) {
			System.err.println("In IndexExplorer each field must be specified");
			throw new IllegalArgumentException();
		}
		IndexReader reader = DirectoryReader.open(
				FSDirectory.open(Paths.get(searchIndexPath))
				);
		searcher = new IndexSearcher(reader);
		Analyzer analyzer = new StandardAnalyzer();
		switch(model) {
		case BM25_PROBABILITY: searcher.setSimilarity(new BM25Similarity());
		default: searcher.setSimilarity(new ClassicSimilarity());
		}
		QueryParser parser = new QueryParser(field.toString(),analyzer);
		Query query = parser.parse(queryString);
		
		results = searcher.search(query, SHOWPAGES*HITSPERPAGE);
		hits = results.scoreDocs;
		totalHits = Math.toIntExact(results.totalHits);
	}
	
	// getters
	public int getNumPage() {
		return totalHits/HITSPERPAGE;
	}
	public int getTotalHit() {
		return totalHits;
	}

	public Document[] getPageResult(int page) throws IOException {
		int start = page*HITSPERPAGE;
		Document[] docs ;
		if (start+HITSPERPAGE < totalHits)
			docs = new Document[HITSPERPAGE];
		else // (start+HITSPERPAGE >= totalHits)
			docs = new Document[totalHits-start];
		for (int i = start ; i < start+HITSPERPAGE && i < totalHits ; i++) {
			docs[i] = searcher.doc(hits[i].doc);
			System.out.println(docs[i]);
		}
		return docs;
	}
}
