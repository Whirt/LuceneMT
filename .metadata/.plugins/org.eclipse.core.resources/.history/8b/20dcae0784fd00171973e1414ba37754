
import java.io.IOException;
import java.nio.file.Paths;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.Term;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.FuzzyQuery;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.similarities.BM25Similarity;
import org.apache.lucene.search.similarities.ClassicSimilarity;
import org.apache.lucene.search.spans.SpanMultiTermQueryWrapper;
import org.apache.lucene.search.spans.SpanNearQuery;
import org.apache.lucene.search.spans.SpanQuery;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;

import GUI.Window;
import LuceneIndexing.TolerantID;

/* Lucene Models and Tolerant retrieval test on sMarT benchmark
 * 
 * Apache Lucene è un pacchetto Java per sistemi d'information retrieval. 
 * Supporta l'indexing, quindi pre-processing e la creazione/uso di modelli di 
 * information retrieval per fare searching e ranking offrendo anche diverse 
 * tecniche di Tolerant retrieval, il tutto è ottimizzato per ottenere alte 
 * prestazioni. Inoltre nel caso non bastassero supporta anche la 
 * personalizzazione/creazione di nuovi modelli di ranking e tipologie di query. 
 * 
 * Questo progetto mira alla presentazione del pacchetto Lucene vers. 7.2.1
 * in particolare vuole permettere all'utente di testare i modelli classici
 * di IR offerti dalla libreria, mettere in luce le tecniche di tolerant
 * retrieval supportate e fornire dati per la valutazione della Precision
 * e Recall tramite lo SMART Benchmark.
 * 
 * Data: Gennaio 2017
 * Autore: Hu Jia Cheng
 */
public class LuceneMT {

	public static void main(String[] args) {
		System.out.println("Starting LuceneMT...");
		Window wn = new Window();
		
		try {
		Directory indexDir = FSDirectory.open(Paths.get("./indexes/SMART/ADI"));
		IndexReader reader = DirectoryReader.open(indexDir);
		IndexSearcher searcher = new IndexSearcher(reader);
		// configuring query parser and analyzer
		Analyzer analyzer = new StandardAnalyzer();
		QueryParser parser = new QueryParser("content",analyzer);
		// handling fuzzy queries
		Query query = new FuzzyQuery(new Term("content","computre"));
		//String term = "computre appel";
		//String[] tokens = term.split(" ");
		//SpanQuery[] clauses = new SpanQuery[tokens.length];
		//for (int i = 0 ; i < tokens.length ; i++) {
		//	clauses[i] = new SpanMultiTermQueryWrapper<FuzzyQuery>(
		//		new FuzzyQuery(new Term("content",
		//		tokens[i])));
		//}
		//query = new SpanNearQuery(clauses, 0, true);
		System.out.println("sarching for:"+query.toString());
		TopDocs results = searcher.search(query, 5*10);
		int totalHits = Math.toIntExact(results.totalHits);
		System.out.println("TotalHits:"+totalHits);
		System.out.println("Hits len:"+hits.length);
		ScoreDoc[] hits = results.scoreDocs;
		Document[] resultDoc = new Document[hits.length];
		for (int i = 0 ; i < hits.length ; i++) {
			resultDoc[i] = searcher.doc(hits[i].doc);
			System.out.println("ID:"+resultDoc[i].get("id"));
		}
		
		System.out.println("erroree");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
