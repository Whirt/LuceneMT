package BenchMarking;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Scanner;
import java.util.regex.Pattern;

import LuceneIndexing.DocFields;
import LuceneIndexing.ModelsID;
import LuceneIndexing.TolerantID;
import utils.Finder;

/* Classe che automatizza il processo di valutazione delle Precision
 * e Recall del benchmark SMART
 */

// Cosa fa in breve, dato il path di dove cercare il benchmark
// e dove cercare l'indice, calcola aumaticamente le precision a diversi
// livelli di recall

/** This class process automatically precision and recall evaluation 
 * from a given SMART BENCHMARK data and provide method to get results that can be
 * used to generate table and plots.
 */
public class SmartBCM {
	
	private final static String UTF8_BOM = "\uFEFF";
	
	// query at position 0 is unused
	private String[] queries;
	// relevant docs for each given query, again array 0 is unused
	private String[][] relevantDocs;
	private String[][] naturalLevelReclPrec;
	
	/** Evaluates precision and recall on each query of query set
	 * @param benchMarkPath, benchmark query set and relevant set path
	 * @param searchIndexPath, benchmark index path 
	 * @param model, searching phase similarity configuration
	 * @param tolerantMode, tolerant mode that will be activated
	 * @param field, document field
	 */
	public SmartBCM(String benchMarkPath, String searchIndexPath, ModelsID model, 
			TolerantID tolerantMode,DocFields field) throws IOException {
		if (benchMarkPath == null || searchIndexPath == null || 
				benchMarkPath.equals(searchIndexPath) ||	
				!Files.isReadable(Paths.get(benchMarkPath)) ||
				!Files.isWritable(Paths.get(searchIndexPath))) {
				System.err.println("Error the following path\n"+benchMarkPath+"\n"
						+searchIndexPath+"\n"+"may not exist or respectively "+
						"not readable or writable");
				throw new IllegalArgumentException();
			}
		
		queries = null;
		relevantDocs = null;
		
		// Unfortunately Smart benchmark present several query file names
		Finder finder = new Finder("*.QRY");
		Path startingDir = Paths.get(benchMarkPath);
		Files.walkFileTree(startingDir,finder);
		String[] findResults = finder.getResults();
		String queryFile = findResults[0];
		initQueryArray(queryFile);
		relevantDocs = new String[queries.length][];
		
		finder = new Finder("*.REL");
		startingDir = Paths.get(benchMarkPath);
		Files.walkFileTree(startingDir,finder);
		findResults = finder.getResults();
		String relevantsFile = findResults[0];
		initRelevantDocs(relevantsFile);
	}
	
	public String getQuery(int index) {
		if (index < 1 || index >= queries.length)
			return "Index out of bounds";
		else
			return queries[index];
	}
	
	public int getNumQueries() {
		if (queries == null) {
			return 0;
		} else {
			return (queries.length)-1;
		}
	}
	
	/* Siccome i documenti di SMART non sono sempre perfetti. Si effettua
	 * il retrieving delle query ha un aspetto complicato ma è per ovviare
	 * a ciò.
	 */
	private void initQueryArray(final String queryFile) 
			throws FileNotFoundException {
		
		/* L'indexing seguente funziona nel caso i file contenenti
		 * i dati del benchmark siano ordinati correttamente senza 
		 * ripetizione di delimitatori, in caso contrario si avranno
		 * errori in lettura */
		Scanner scan;
		scan = new Scanner(new File(queryFile));
		Pattern delimiter = Pattern.compile("\\p{IsPunctuation}(I|W|N|A)");
		scan.useDelimiter(delimiter);
		
		// count number of queries
		int numQuery = 0;
		while(scan.hasNextLine()) {
			String delimiterStr = scan.findInLine(delimiter);
			while (!delimiterStr.equals(".W")) {
					scan.next();
				delimiterStr = scan.findInLine(delimiter);
			}
			numQuery++;
			scan.next(); 
		}
		scan.close();
		
		scan = new Scanner(new File(queryFile));
		scan.useDelimiter(delimiter);
		// Playing with +1-1 on array index is confusing and error prone, 
		// adding "+1" on dimension we guarantee that array index corresponds 
		// to the query ID since SMART query enumeration start from 1
		queries = new String[numQuery+1];
		queries[0] = "NO_QUERY_WILL_BE_PLACED_HERE";
		int idCounter = 1;
		while (scan.hasNextLine()) {
			String delimiterStr = scan.findInLine(delimiter);
			while (!delimiterStr.equals(".W")) {
				scan.next();
				delimiterStr = scan.findInLine(delimiter);
			}
			queries[idCounter] = scan.next();
			
			//System.out.println("id:"+idCounter);
			//System.out.println("query:"+queries[idCounter]);
			idCounter++;
		}
		scan.close();
	}
	
	private void initRelevantDocs(String relevantsFile) throws FileNotFoundException {
		// counting occurrencess
		int[] occurrences = new int[queries.length] ;
		for (int i = 0 ; i < occurrences.length ; i++) {
			occurrences[i] = 0;
		}
		
		Scanner scan;
		scan = new Scanner(new File(relevantsFile));
		Pattern delimiter = Pattern.compile("\\p{Space}|0|0\\p{IsPunctuation}0*+");
		scan.useDelimiter(delimiter);
		while(scan.hasNextLine()) {
			String stringIDNum = scan.next();
			// removing UTF8_BOM since Java does not handle it properly
			if (stringIDNum.startsWith(UTF8_BOM)) {
				System.out.println("BOM Handled1");
				stringIDNum = stringIDNum.substring(0,stringIDNum.length()-1);
			} if (stringIDNum.contains(UTF8_BOM)) {
				System.out.println("BOM Handled2");
			}
			System.out.println(stringIDNum);
			//int queryID = Integer.parseInt(stringIDNum);
			//occurrences[queryID]++;
			scan.next(); // do not consider document id now
		}
		scan.close();
		
		System.out.println("Hey printing");
		
		for (int i = 0 ; i < occurrences.length ; i++) {
			System.out.println("id occurrences:"+occurrences[i]);
		}
	}
}
